# -*- coding: utf-8 -*-
"""Jun_YZ1229.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-j0qzKPNxUh_CI9U-TW-MeXQBEFadiBc
"""

import pandas as pd
from google.colab import drive
import matplotlib.pyplot as plt
import matplotlib
import numpy as np
import seaborn as sns
import plotly.express as px 
import plotly
import folium

drive.mount('/content/gdrive')

act = pd.read_csv('/content/gdrive/Shareddrives/dacom_yz/2_act_info.csv')
cus = pd.read_csv('/content/gdrive/Shareddrives/dacom_yz/2_cus_info.csv')
iem = pd.read_csv('/content/gdrive/Shareddrives/dacom_yz/2_iem_info.csv')
trd_kr = pd.read_csv('/content/gdrive/Shareddrives/dacom_yz/2_trd_kr.csv')
trd_oss = pd.read_csv('/content/gdrive/Shareddrives/dacom_yz/2_trd_oss.csv')

act.columns = ['계좌번호', '고객번호', '계좌개설월']
cus.columns = ['고객번호', '성별', '연령대', '주소(시도)', '고객등급', '고객투자성향']
iem.columns = ['종목코드', '종목영문명', '종목한글명']
trd_kr.columns = ['계좌번호','주문날짜','주문순서','주문접수시간대','최종체결시간대','종목코드','매매구분코드','체결수량','체결가격','주문매체구분코드']
trd_oss.columns = ['계좌번호','주문날짜','주문순서','주문접수시간대','최종체결시간대','종목코드','매매구분코드','체결수량','체결가격','주문매체구분코드','거래통화코드','거래통화환율']
#data_schema_vf.xlsx

yz20 = cus['연령대'] == 20
yz25 = cus['연령대'] == 25
yz30 = cus['연령대'] == 30
yz35 = cus['연령대'] == 35

cus_yz = cus.loc[cus['연령대'].index[yz20 | yz25 | yz30 | yz35]]
cus_y = cus.loc[cus['연령대'].index[yz20 | yz25]]
cus_z = cus.loc[cus['연령대'].index[yz30 | yz35]]

"""<u><h3> EDA) X & Y & Z세대 비율 </h3></u>

Y 세대는 20-30세, Z 세대는 30-40세, 그 이상은 X 세대로 분류할 수 있습니다. 중요한 것은 Y & Z 세대의 비율이기 때문에, 19세 이하와 X 세대는 'others'로 묶어 비율을 나타내었습니다.
"""

ages = cus['연령대'].value_counts()
ages.sort_index(inplace=True)

others = ages[0] + ages[40] + ages[45] + ages[50] + ages[55] + ages[60] + ages[65] + ages[70]
Y =  ages[30] + ages[35]
Z =  + ages[20] + ages[25]

explode = [0.05, 0.05, 0.05]
#colors = ['#ff9999', '#ffc000', '#8fd9b6', '#d395d0']
ages_range = ['Others', 'Y', 'Z']
colors = ['#a5d98f', '#8fd9b6', '#8fd9cf', '#8fc7d9', '#8fa0d9', '#a28fd9', '#b98fd9', '#c78fd9', '#d395d0', '#d395b8', '#d395a6', '#d39595']


fig, ax = plt.subplots(1, 2,figsize=(20,15))



ax[0].bar(ages_range,[others, Y, Z], color = colors)
ax[1].pie([others, Y, Z], labels = ages_range, autopct='%.1f%%', startangle=260, counterclock=False, explode=explode, shadow=True, colors=colors) #textprops={'fontsize': 10}

plt.rcParams.update({'font.size': 20})

ax[0].tick_params(labelrotation=0)
ax[0].set_title('Others, Y, Z',fontweight="bold", size=20)

plt.show()

"""<u><h3> EDA) Y & Z세대 투자자 성비 </h3></u>"""

sex_counts_yz = cus_yz['성별'].value_counts()

explode = [0.05, 0.05]
#colors = ['#ff9999', '#ffc000', '#8fd9b6', '#d395d0']
colors = ['#ffc000', '#ff9999']


fig, ax = plt.subplots(1,2,figsize=(20,15))


ax[0].bar(['male', 'female'],[sex_counts_yz[1], sex_counts_yz[2]], color = colors)
ax[1].pie([sex_counts_yz[1], sex_counts_yz[2]], labels=['male', 'female'], autopct='%.1f%%', startangle=260, counterclock=False, explode=explode, shadow=True, colors=colors) #textprops={'fontsize': 25}

ax[0].set_title('XY gender ratio bar chart')
ax[1].set_title('XY gender ratio pie chart')

#plt.scatter(['male', 'female'], [sex_counts[1], sex_counts[2]], marker= 'o', s=400, color= 'red', alpha=0.5)
plt.rcParams.update({'font.size': 20})

plt.show()

"""국내 주식종목 거래 데이터인 trd_kr 데이터에는 거래에 관한 정보는 있지만, 거래를 행한 고객에 관한 정보는 나와있지 않기 때문에 이를 한꺼번에 확인할 수 있도록 데이터프레임을 구성하였습니다. 또한, 주 관심사인 Y & Z세대의 데이터만 필터링하였습니다."""

act_tmp = act.iloc[:,0:2]
cus_tmp = cus.iloc[:,0:3]

result = pd.merge(act_tmp, cus_tmp, on = '고객번호', how='right')
mydata = pd.merge(result, trd_kr, on = '계좌번호', how='right') #trd_oss
mydata

mydata['세대'] = ['Y' if mydata['연령대'][i] in [30, 35] else ('Z' if mydata['연령대'][i] in [20, 25] else 'X') for i in range(len(mydata)) ]
mydata

#sell = mydata[mydata['매매구분코드']==1]
#buy = mydata[mydata['매매구분코드']==2]

YZ = mydata[mydata['세대'].isin(['Y','Z'])]

Y = mydata[mydata['세대'].isin(['Y'])]
Z = mydata[mydata['세대'].isin(['Z'])]

"""마찬가지로, 해외 종목 데이터인 trd_oss에도 거래에 관한 정보는 있지만, 거래를 행한 고객에 관한 정보는 나와있지 않기 때문에 이를 한꺼번에 확인할 수 있도록 데이터프레임을 구성하였습니다. 또한, 주 관심사인 Y & Z세대의 데이터만 필터링하였습니다."""

act_tmp = act.iloc[:,0:2]
cus_tmp = cus.iloc[:,0:3]

result = pd.merge(act_tmp, cus_tmp, on = '고객번호', how='right')
mydata_for = pd.merge(result, trd_oss, on = '계좌번호', how='right') #trd_oss
mydata_for

mydata_for['세대'] = ['Y' if mydata_for['연령대'][i] in [30, 35] else ('Z' if mydata_for['연령대'][i] in [20, 25] else 'X') for i in range(len(mydata_for)) ]
mydata_for

#sell = mydata[mydata['매매구분코드']==1]
#buy = mydata[mydata['매매구분코드']==2]

YZ_for = mydata_for[mydata_for['세대'].isin(['Y','Z'])]

Y_for = mydata_for[mydata_for['세대'].isin(['Y'])]
Z_for = mydata_for[mydata_for['세대'].isin(['Z'])]

"""<h1><u> 주문매체 </u></h>

YZ세대가 국내 주식종목 거래에 주로 이용하는 주문 매체는 무엇인지 파악해보았습니다.
"""

idx = sorted(YZ['주문매체구분코드'].value_counts().index)
ORR_MDI = ['BranchTerminal', 'Wired-Terminal', 'Wireless MTS', 'HTS' ]

plt.figure(figsize=(20,8))
plt.bar([ ORR_MDI[j-1] for j in idx], [YZ['주문매체구분코드'].value_counts()[i] for i in idx], color=['#a5d98f', '#8fd9b6', '#8fd9cf'])

for i in range(3):
  plt.text([ORR_MDI[j-1] for j in idx][i], [YZ['주문매체구분코드'].value_counts()[i] for i in idx][i], '{}'.format([YZ['주문매체구분코드'].value_counts()[i] for i in idx][i]) )
plt.title('Y&Z Generation Order Media')
plt.show()

"""그 결과, 대부분이 무선MTS단말을 사용했고, 드물게 HTS를 사용했습니다. 영업점 단말은 거의 사용되지 않았고, 유선단말은 아예 사용되지 않았습니다.

주문 매체의 사용 순위가 압도적이었기 때문에, 성별에 영향을 받았는지 확인했습니다.

YZ세대 성별별 주문매체
"""

YZ_men = YZ[YZ['성별']==1]
YZ_women = YZ[YZ['성별']==2]

[YZ['주문매체구분코드'].value_counts()[i] for i in idx]

labels = [ ORR_MDI[j-1] for j in idx]
men_means = [YZ_men['주문매체구분코드'].value_counts()[i] for i in idx]
women_means = [YZ_women['주문매체구분코드'].value_counts()[i] for i in idx]

x = np.arange(len(labels))  # the label locations
width = 0.35  # the width of the bars

fig, ax = plt.subplots(figsize=(20,10))
rects1 = ax.bar(x - width/2, men_means, width, color='#ffc000', label='Men')
rects2 = ax.bar(x + width/2, women_means, width, color='#ff9999', label='Women')

# Add some text for labels, title and custom x-axis tick labels, etc.
ax.set_ylabel('Counts')
ax.set_title('Y&Z Generation Order Media by Gender')
ax.set_xticks(x)
ax.set_xticklabels(labels)
ax.legend()


def autolabel(rects):
    """Attach a text label above each bar in *rects*, displaying its height."""
    for rect in rects:
        height = rect.get_height()
        ax.annotate('{}'.format(height),
                    xy=(rect.get_x() + rect.get_width() / 2, height),
                    xytext=(0, 5),  # 3 points vertical offset
                    textcoords="offset points",
                    ha='center', va='bottom')


autolabel(rects1)
autolabel(rects2)


#fig.tight_layout()

plt.show()

"""확인 결과, 성별별로 분류했음에도 불구하고 각각 압도적인 사용량 차이가 유지되었습니다.

<h1><u> 국내 주문접수시간대 </u></h>

투자자의 직접적인 수익 관련 인사이트는 아니지만, 이외에도 어플 내 광고 등 활용방식이 다양한 국내주식 주문접수시간대 추세를 알아보았습니다.

따로
"""

times = sorted(YZ['주문접수시간대'].value_counts().index)


YZ_men = YZ[YZ['성별']==1]
times_men = sorted(YZ_men['주문접수시간대'].value_counts().index)

YZ_women = YZ[YZ['성별']==2]
times_women = sorted(YZ_women['주문접수시간대'].value_counts().index)


fig, ax= plt.subplots(1,3, figsize=(20,8))


ax[0].plot( times, [YZ['주문접수시간대'].value_counts()[i] for i in times])
ax[0].set_title('Order Time')

ax[1].plot( times_men, [YZ_men['주문접수시간대'].value_counts()[i] for i in times_men], color='#ffc000')
ax[1].set_title('Order Time (Men)')

ax[2].plot( times_women, [YZ_women['주문접수시간대'].value_counts()[i] for i in times_women], color='#ff9999')
ax[2].set_title('Order Time (Women)')

"""한 번에"""

times = sorted(YZ['주문접수시간대'].value_counts().index)


YZ_men = YZ[YZ['성별']==1]
times_men = sorted(YZ_men['주문접수시간대'].value_counts().index)

YZ_women = YZ[YZ['성별']==2]
times_women = sorted(YZ_women['주문접수시간대'].value_counts().index)




plt.figure(figsize=(20,8))
plt.plot( times, [YZ['주문접수시간대'].value_counts()[i] for i in times])
plt.plot( times_men, [YZ_men['주문접수시간대'].value_counts()[i] for i in times_men], '#ffc000')
plt.plot( times_women, [YZ_women['주문접수시간대'].value_counts()[i] for i in times_women], '#ff9999')
plt.xlabel('Time', color='white')
plt.ylabel('Orders', color='white')
plt.xticks(times)

plt.grid(True)
plt.legend(['Whole', 'Men', 'Women'], loc='upper left')

plt.title('Order Time', color='white')

"""<h1><u> 국외 주문접수시간대 </u></h>"""

times = sorted(YZ_for['주문접수시간대'].value_counts().index)


YZ_for_men = YZ_for[YZ_for['성별']==1]
times_men = sorted(YZ_for_men['주문접수시간대'].value_counts().index)

YZ_for_women = YZ_for[YZ_for['성별']==2]
times_women = sorted(YZ_for_women['주문접수시간대'].value_counts().index)

fig, ax= plt.subplots(1,3, figsize=(20,8))


ax[0].plot(times, [YZ_for['주문접수시간대'].value_counts()[i] for i in times])
ax[0].set_title('Order Time')

ax[1].plot( times_men, [YZ_for_men['주문접수시간대'].value_counts()[i] for i in times_men], color='#ffc000')
ax[1].set_title('Order Time (Men)')

ax[2].plot( times_women, [YZ_for_women['주문접수시간대'].value_counts()[i] for i in times_women], color='#ff9999')
ax[2].set_title('Order Time (Women)')

"""한 번에"""

times = sorted(YZ_for['주문접수시간대'].value_counts().index)


YZ_for_men = YZ_for[YZ_for['성별']==1]
times_men = sorted(YZ_for_men['주문접수시간대'].value_counts().index)

YZ_for_women = YZ_for[YZ_for['성별']==2]
times_women = sorted(YZ_for_women['주문접수시간대'].value_counts().index)




plt.figure(figsize=(20,8))
plt.plot( times, [YZ_for['주문접수시간대'].value_counts()[i] for i in times])
plt.plot( times_men, [YZ_for_men['주문접수시간대'].value_counts()[i] for i in times_men], '#ffc000')
plt.plot( times_women, [YZ_for_women['주문접수시간대'].value_counts()[i] for i in times_women], '#ff9999')
plt.xlabel('Time', color='white')
plt.ylabel('Orders', color='white')
plt.xticks(times)

plt.grid(True)
plt.legend(['Whole', 'Men', 'Women'], loc='upper left')

plt.title('Order Time', color='white')

"""<u><h3> 등급별 수익 box plot </h3></u>

고객등급에 따라 주식으로 인한 손익에 눈에 띄는 차이가 있는지 알아보기 위해 box plot을 그렸습니다. 손익은 주어진 데이터만을 사용해서 유추해보기 위해 ~를 기준으로 산정하였습니다.
"""

#act num : 계좌 개수
#trd num : 매도 + 매수 합친 횟수
profit = pd.read_csv('/content/gdrive/Shareddrives/dacom_yz/cus_inf.csv')

profit['total_profit'] = profit['money_earn'] + profit['money_have']

cus_eng = pd.read_csv('/content/gdrive/Shareddrives/dacom_yz/2_cus_info.csv')

yz20 = cus_eng['cus_age'] == 20
yz25 = cus_eng['cus_age'] == 25
yz30 = cus_eng['cus_age'] == 30
yz35 = cus_eng['cus_age'] == 35

cus_yz_eng = cus_eng.loc[cus_eng['cus_age'].index[yz20 | yz25 | yz30 | yz35]]

profit_yz = pd.merge(cus_yz_eng, profit, on = 'cus_id', how='inner')

import plotly.graph_objects as go
import numpy as np

fig = go.Figure()
fig.add_trace(go.Box(y=profit_yz[profit_yz['tco_cus_grd_cd']=='01']['total_profit'], name='탑클래스'))
fig.add_trace(go.Box(y=profit_yz[profit_yz['tco_cus_grd_cd']=='02']['total_profit'], name='골드'))
fig.add_trace(go.Box(y=profit_yz[profit_yz['tco_cus_grd_cd']=='03']['total_profit'], name='로얄'))
fig.add_trace(go.Box(y=profit_yz[profit_yz['tco_cus_grd_cd']=='04']['total_profit'], name='그린'))
fig.add_trace(go.Box(y=profit_yz[profit_yz['tco_cus_grd_cd']=='05']['total_profit'], name='블루'))
fig.add_trace(go.Box(y=profit_yz[profit_yz['tco_cus_grd_cd']=='09']['total_profit'], name='등급없음'))
fig.add_trace(go.Box(y=profit_yz[profit_yz['tco_cus_grd_cd']==' _']['total_profit'], name='해당사항없음'))

fig.show()

"""등급마다 산정 기준이 정확히 N배 되는 것이 아니기 때문에 정확한 수익 수치는 중요하지 않습니다. 다만, box plot에서 알 수 있듯이 5등급과 9등급은 상하로 반면, 나머지 등급은 -가 더 많고, 탑클래스 등급은.


또한, 상위 등급으로 갈수록 대체로 박스가 조금씩 상/하로 길어지는데, 이는 일반적으로 고객별 손익의 폭이 커짐을 의미합니다. 고객등급이 자산을 기준으로 산정된다는 점을 고려했을 때, 자산이 많을 수록 주식에 투자하는 금액이 커지고, 이에 따라 손익의 편차가 커진다라고 해석할 수 있습니다.


탑클래스 고객의 경우 ~ 기준 -가 훨씬 많았음을 알 수 있습니다.

<u><h3> 투자 성향별 수익 box plot </h3></u>
"""

import plotly.graph_objects as go

fig = go.Figure()
fig.add_trace(go.Box(y=profit_yz[profit_yz['ivs_icn_cd']=='01']['total_profit'], name='안전형'))
fig.add_trace(go.Box(y=profit_yz[profit_yz['ivs_icn_cd']=='02']['total_profit'], name='안전추구형'))
fig.add_trace(go.Box(y=profit_yz[profit_yz['ivs_icn_cd']=='03']['total_profit'], name='위험중립형'))
fig.add_trace(go.Box(y=profit_yz[profit_yz['ivs_icn_cd']=='04']['total_profit'], name='적극투자형'))
fig.add_trace(go.Box(y=profit_yz[profit_yz['ivs_icn_cd']=='05']['total_profit'], name='공격투자형'))
fig.add_trace(go.Box(y=profit_yz[profit_yz['ivs_icn_cd']=='09']['total_profit'], name='전문투자형'))
fig.add_trace(go.Box(y=profit_yz[profit_yz['ivs_icn_cd']=='00']['total_profit'], name='정보제공미동의'))
fig.add_trace(go.Box(y=profit_yz[profit_yz['ivs_icn_cd']=='-']['total_profit'], name='해당 없음'))

fig.show()

"""전문 투자자형이 눈에 띄게 좋은 수익률을 보여주고, 나머지 유형에는 별 다른 패턴이 없었으나 주로 공격적일 수록 - 포인트가 많아진다는 사실을 알 수 있습니다.

<h3><u> 코로나 이후 국내 인기 종목 Top 10 </u></h3>

코로나 이후, 국내 주식 중 어떤 것들이 매수 인기가 있었는지 알아보겠습니다.
"""

from datetime import datetime, timedelta

domestic_c = YZ.copy()
domestic_c['주문날짜'] = pd.to_datetime(domestic_c['주문날짜'], format = '%Y%m%d')

con0 = domestic_c['주문날짜']<'2020-02-01'
con1 = domestic_c['주문날짜']>='2020-02-01'
con2 = domestic_c['매매구분코드']>=2

#종합

domestic = domestic_c[con2][['종목코드', '체결수량']]
grouped_domestic = domestic.groupby('종목코드')
summed_domestic = grouped_domestic.sum()
sorted_sum_domestic = summed_domestic.sort_values(by=['체결수량'], axis=0, ascending=False)
iem_tmp = iem[['종목코드', '종목한글명']]
top_domestic = pd.merge(sorted_sum_domestic, iem_tmp, on='종목코드', how='inner')
top10_domestic =  top_domestic.iloc[0:10][:]

#코로나 이전

domestic_nocovid = domestic_c[con0 & con2][['종목코드', '체결수량']]
grouped_domestic_nc = domestic_nocovid.groupby('종목코드')
summed_domestic_nc = grouped_domestic_nc.sum()
sorted_sum_domestic_nc = summed_domestic_nc.sort_values(by=['체결수량'], axis=0, ascending=False)
iem_tmp = iem[['종목코드', '종목한글명']]
top_domestic_nc = pd.merge(sorted_sum_domestic_nc, iem_tmp, on='종목코드', how='inner')
top10_domestic_nc =  top_domestic_nc.iloc[0:10][:]

#코로나 이후

domestic_covid = domestic_c[con1 & con2][['종목코드', '체결수량']]
grouped_domestic_c = domestic_covid.groupby('종목코드')
summed_domestic_c = grouped_domestic_c.sum()
sorted_sum_domestic_c = summed_domestic_c.sort_values(by=['체결수량'], axis=0, ascending=False)
iem_tmp = iem[['종목코드', '종목한글명']]
top_domestic_c = pd.merge(sorted_sum_domestic_c, iem_tmp, on='종목코드', how='inner')
top10_domestic_c =  top_domestic_c.iloc[0:10][:]

"""<u><h3> 종합 </h3></u>"""

import plotly.graph_objects as go

fig = go.Figure(data=[go.Pie(labels = top10_domestic['종목한글명'], values = top10_domestic['체결수량'])])

fig.update_traces(hole=.4, hoverinfo="label+percent+name")

fig.update_layout(
    title_text="국내종목 매수인기 TOP 10",
    # Add annotations in the center of the donut pies.
    )

fig.show()

"""<u><h3> 코로나 이전 / 이후 둘 다 </h3></u>"""

from plotly.subplots import make_subplots

fig = make_subplots(rows=1, cols=2, specs=[[{'type':'domain'}, {'type':'domain'}]])
fig.add_trace(go.Pie(labels=top10_domestic_nc['종목한글명'], values=top10_domestic_nc['체결수량'], name="코로나 이전"),
              1, 1)
fig.add_trace(go.Pie(labels=top10_domestic_c['종목한글명'], values=top10_domestic_c['체결수량'], name="코로나 이후"),
              1, 2)


# Use `hole` to create a donut-like pie chart
fig.update_traces(hole=.4, hoverinfo="label+percent+name")

fig.update_layout(
    title_text="코로나 이전 / 이후 TOP 10 매수인기 국내종목",
    # Add annotations in the center of the donut pies.
    annotations=[dict(text='이전', x=0.20, y=0.5, font_size=20, showarrow=False),
                 dict(text='이후', x=0.80, y=0.5, font_size=20, showarrow=False)])
fig.show()

"""코로나 이전에는, 도합 50퍼센트가 넘는 비율로 삼성 관련주 매수가 인기였습니다. 그러나 코로나 이후, 순위권에 없던 에스맥이 1위 (21.8%)로 급부상했습니다. 이는 에스맥이 자회사 다이노나를 통해 코로나19 치료제 개발 중에 있기 때문으로 해석할 수 있습니다. 여전히 삼성 관련 주가 순위권에 있었고, 케이엔엔 또한 3위 (9.51%) 로 부상했습니다.


5월 경, 김종인 비대위원장의 당내 대선 주자 없다는 발언 속 홍정욱 전 의원 대권주자 부각됨에 따라 KNN, 고려산업, 한국프랜지, 디지틀조선 등 일부 정치/인맥(홍정욱) 테마가 상승세를 기록했을 것으로 예상할 수 있습니다.


코로나 이슈를 포함해서, 많은 테마주들이 기간을 두고 매수 순위가 급상승 / 급락함을 알 수 있습니다.

<u><h3>에스맥의 매수 트렌드</h3></u>
"""

for_smac = YZ.copy()

for a, i in enumerate([*iem['종목한글명']]):
  if i.find('에스맥') != -1:
    print(a, i)

iem[iem['종목한글명']==iem['종목한글명'][1010]]['종목코드'][1010]

smac = for_smac[for_smac['종목코드']==iem[iem['종목한글명']==iem['종목한글명'][1010]]['종목코드'][1010]]
smac_buy = smac[smac['매매구분코드']==2][['주문날짜', '체결수량']]

from datetime import datetime, timedelta

smac_buy['주문날짜'] = pd.to_datetime(smac_buy['주문날짜'], format = '%Y%m%d')
smac_buy.sort_values('주문날짜', inplace=True)

layout = go.Layout(title = '에스맥 매수 트렌드', yaxis=dict(range=[0,40000]))
fig = go.Figure(data = [
                        go.Scatter(x = smac_buy['주문날짜'], y = smac_buy['체결수량'], line_shape = 'linear', name = '에스맥')
], layout = layout)
fig.update_xaxes(linecolor = 'rgb(0, 0, 0)')
fig.update_layout(title = {'y': 0.87, 'x': 0.5, 'xanchor': 'center', 'yanchor': 'top'})
fig.update_layout(plot_bgcolor = 'rgb(255, 255, 255)')

"""<u><h3>케이엔엔의 매수 트렌드</h3></u>"""

for_knn = YZ.copy()

for a, i in enumerate([*iem['종목한글명']]):
  if i.find('케이엔엔') != -1:
    print(a, i)

iem[iem['종목한글명']==iem['종목한글명'][3309]]['종목코드'][3309]

knn = for_knn[for_knn['종목코드']==iem[iem['종목한글명']==iem['종목한글명'][3309]]['종목코드'][3309]]
knn_buy = knn[knn['매매구분코드']==2][['주문날짜', '체결수량']]

from datetime import datetime, timedelta

knn_buy['주문날짜'] = pd.to_datetime(knn_buy['주문날짜'], format = '%Y%m%d')
knn_buy.sort_values('주문날짜', inplace=True)

layout = go.Layout(title = '케이엔엔 매수 트렌드')#, yaxis=dict(range=[0,40000]))
fig = go.Figure(data = [
                        go.Scatter(x = knn_buy['주문날짜'], y = knn_buy['체결수량'], line_shape = 'linear', name = '케이엔엔')
], layout = layout)
fig.update_xaxes(linecolor = 'rgb(36, 100, 40)')
fig.update_layout(title = {'y': 0.87, 'x': 0.5, 'xanchor': 'center', 'yanchor': 'top'})
fig.update_layout(plot_bgcolor = 'rgb(255, 255, 255)')

"""<u><h3> 에스맥 + 케이엔엔 (이슈주) vs 삼성전자 관련주 3종 (테마주 - IT 대표) </h3></u>

국내종목 상위 10 목록
"""

top10_domestic

for_samsung = YZ.copy()

for_samsung['종목코드'] = [i.replace(' ', '') for i in [*for_samsung['종목코드']]]

samsung = for_samsung[for_samsung['종목코드'].isin(['A252670', 'A233740', 'A122630'])]
samsung_buy = samsung[samsung['매매구분코드']==2].copy()

from datetime import datetime, timedelta

samsung_buy['주문날짜'] = pd.to_datetime(samsung_buy['주문날짜'], format = '%Y%m%d')

A252670_buy = samsung_buy[samsung_buy['종목코드'] == 'A252670'][['주문날짜', '체결수량']]
A233740_buy = samsung_buy[samsung_buy['종목코드'] == 'A233740'][['주문날짜', '체결수량']]
A122630_buy = samsung_buy[samsung_buy['종목코드'] == 'A122630'][['주문날짜', '체결수량']]

A252670_buy.sort_values('주문날짜', inplace=True)
A233740_buy.sort_values('주문날짜', inplace=True)
A122630_buy.sort_values('주문날짜', inplace=True)

layout = go.Layout(title = '이슈주 vs 테마주 (매수 트렌드)', yaxis=dict(range=[0,100000]))
fig = go.Figure(data = [
                        go.Scatter(x = smac_buy['주문날짜'], y = smac_buy['체결수량'], line_shape = 'linear', name = '에스맥'),
                        go.Scatter(x = knn_buy['주문날짜'], y = knn_buy['체결수량'], line_shape = 'linear', name = '케이엔엔'),
                        go.Scatter(x = A252670_buy['주문날짜'], y = A252670_buy['체결수량'], line_shape = 'linear', name = '삼성 KODEX 200선물인버스2X증권상장지수투자신탁(주식-파생형)'),
                        go.Scatter(x = A233740_buy['주문날짜'], y = A233740_buy['체결수량'], line_shape = 'linear', name = '삼성 KODEX 코스닥150 레버리지증권상장지수투자신탁(주식-파생형)'),
                        go.Scatter(x = A122630_buy['주문날짜'], y = A122630_buy['체결수량'], line_shape = 'linear', name = '삼성KODEX레버리지증권상장지수투자신탁[주식-파생형]')
], layout = layout)
fig.update_xaxes(linecolor = 'rgb(0, 0, 0)')
fig.update_layout(title = {'y': 0.87, 'x': 0.5, 'xanchor': 'center', 'yanchor': 'top'})
fig.update_layout(plot_bgcolor = 'rgb(255, 255, 255)')

"""<h3><u> 코로나 이전 / 이후 국외 인기 종목 Top 10 </u></h3>"""

from datetime import datetime, timedelta

foreign_c = YZ_for.copy()
foreign_c['주문날짜'] = pd.to_datetime(foreign_c['주문날짜'], format = '%Y%m%d')

con0 = foreign_c['주문날짜']<'2020-02-01'
con1 = foreign_c['주문날짜']>='2020-02-01'
con2 = foreign_c['매매구분코드']>=2

#코로나 이전

foreign_nocovid = foreign_c[con0 & con2][['종목코드', '체결수량']]
grouped_foreign_nc = foreign_nocovid.groupby('종목코드')
summed_foreign_nc = grouped_foreign_nc.sum()
sorted_sum_foreign_nc = summed_foreign_nc.sort_values(by=['체결수량'], axis=0, ascending=False)
iem_tmp = iem[['종목코드', '종목한글명']]
top_foreign_nc = pd.merge(sorted_sum_foreign_nc, iem_tmp, on='종목코드', how='inner')
top10_foreign_nc =  top_foreign_nc.iloc[0:10][:]

#코로나 이후

foreign_covid = foreign_c[con1 & con2][['종목코드', '체결수량']]
grouped_foreign_c = foreign_covid.groupby('종목코드')
summed_foreign_c = grouped_foreign_c.sum()
sorted_sum_foreign_c = summed_foreign_c.sort_values(by=['체결수량'], axis=0, ascending=False)
iem_tmp = iem[['종목코드', '종목한글명']]
top_foreign_c = pd.merge(sorted_sum_foreign_c, iem_tmp, on='종목코드', how='inner')
top10_foreign_c =  top_foreign_c.iloc[0:10][:]

"""<u><h3> 종합 </h3></u>"""

import plotly.graph_objects as go

fig = go.Figure(data=[go.Pie(labels = top10_foreign_c['종목한글명'], values = top10_foreign_c['체결수량'])])

fig.update_traces(hole=.4, hoverinfo="label+percent+name")

fig.update_layout(
    title_text="코로나 이후 국외종목 매수인기 TOP 10",
    # Add annotations in the center of the donut pies.
    )

fig.show()

"""<u><h3> 코로나 이전/이후 둘 다 </h3></u>"""

from plotly.subplots import make_subplots

fig = make_subplots(rows=1, cols=2, specs=[[{'type':'domain'}, {'type':'domain'}]])
fig.add_trace(go.Pie(labels=top10_foreign_nc['종목한글명'], values=top10_foreign_nc['체결수량'], name="코로나 이전"),
              1, 1)
fig.add_trace(go.Pie(labels=top10_foreign_c['종목한글명'], values=top10_foreign_c['체결수량'], name="코로나 이후"),
              1, 2)


# Use `hole` to create a donut-like pie chart
fig.update_traces(hole=.4, hoverinfo="label+percent+name")

fig.update_layout(
    title_text="코로나 이전 / 이후 TOP 10 매수인기 국외종목",
    # Add annotations in the center of the donut pies.
    annotations=[dict(text='이전', x=0.20, y=0.5, font_size=20, showarrow=False),
                 dict(text='이후', x=0.80, y=0.5, font_size=20, showarrow=False)])
fig.show()

"""<h3><u>등급별 국내 인기 종목(체결수량 기준) pie chart</u></h3>

고객 등급별로 매수량이 많은 종목에 주목할 만한 패턴이 있는지 알아보았습니다.
"""

tmpcus = cus_yz.drop(['성별', '연령대'], axis=1)
tmpcus

bulky_YZ = pd.merge(YZ, tmpcus, on='고객번호', how='right')
bulky_YZ

ranks = ["탑클래스", "골드", "로얄", "그린", "블루", "등급 없음"]
ranks_num = ['01', '02', '03', '04', '05', '09']
pop_stocks = []


for num in ranks_num:
  a = bulky_YZ['고객등급']== num
  b = bulky_YZ['매매구분코드']== 2
  c = bulky_YZ[a&b][['종목코드', '체결수량']]
  grouped = c.groupby('종목코드')
  summed = grouped.sum()
  sorted_sum = summed.sort_values(by=['체결수량'], axis=0, ascending=False)
  iem_tmp = iem[['종목코드', '종목한글명']]
  top10 = pd.merge(sorted_sum, iem_tmp, on='종목코드', how='inner')
  pop_stocks.append(top10.iloc[0:10][:])

import plotly.graph_objects as go
from plotly.subplots import make_subplots


fig = make_subplots(rows=2, cols=3, specs=[[{'type':'domain'}, {'type':'domain'}, {'type':'domain'}], [{'type':'domain'}, {'type':'domain'}, {'type':'domain'}]], subplot_titles=([f'<{rank}>' for rank in ranks]))
fig.add_trace(go.Pie(labels=pop_stocks[0]['종목한글명'], values=pop_stocks[0]['체결수량'], name="01"),
              1, 1)
fig.add_trace(go.Pie(labels=pop_stocks[1]['종목한글명'], values=pop_stocks[1]['체결수량'], name="02"),
              1, 2)
fig.add_trace(go.Pie(labels=pop_stocks[2]['종목한글명'], values=pop_stocks[2]['체결수량'], name="03"),
              1, 3)
fig.add_trace(go.Pie(labels=pop_stocks[3]['종목한글명'], values=pop_stocks[3]['체결수량'], name="04"),
              2, 1)
fig.add_trace(go.Pie(labels=pop_stocks[4]['종목한글명'], values=pop_stocks[4]['체결수량'], name="05"),
              2, 2)
fig.add_trace(go.Pie(labels=pop_stocks[5]['종목한글명'], values=pop_stocks[5]['체결수량'], name="09"),
              2, 3)


fig.update_traces(hole=.4, hoverinfo="label+percent+name")

fig.update_layout(
    title_text="등급별 인기 국내종목 TOP 10"
    )

fig.show()

"""탑클래스에서 1위는 에스맥, 2위는 케이엔엔이었습니다. 하지만 에스맥은 탑클래스 외엔 그린 등급과 등급 없음 그룹에서만 순위권이었고 타 등급에서는 순위권 밖이었으며, 케이엔엔은 탑클래스 제외 모든 등급에서 순위권에 들지 못했습니다.
이는 이전에 보았던 차트가 탑클래스에 영향을 많이 받았음을 알 수 있습니다.


삼성 관련 주는 전 등급 (탑클래스 제외)에 걸쳐 꾸준한 인기를 보여주었지만, 각 등급 별로 선호하는 주가 조금씩 다름을 알 수 있습니다. 그러나,- 이아이디 보통주가 그린, 블루, 등급 없음 그룹에서 공통적으로 순위권에 들었고, ICT인프라를 공급하는 하드웨어 업체인 이트론 또한 블루, 등급 없음 그룹에서 순위권이었다는 점에서 다음과 같은 세 가지 큰 해석을 내놓을 수 있습니다.


1. 탑클래스 등급은 다른 다섯 등급과 비교적 독립적으로, 테마주에 집중하는 경향.
2. 다섯 등급 (등급 없음 ~ 골드)에선 대체로 삼성, 이아이디, 이트론 주와 같은 4차 산업 (IT/ICT 관련) 관련 주가 인기있었다.
3. 등급 없음

<h3><u>등급별 국외 인기 종목(체결수량 기준) pie chart</u></h3>
"""

tmpcus = cus_yz.drop(['성별', '연령대'], axis=1)
tmpcus

bulky_for_YZ = pd.merge(YZ_for, tmpcus, on='고객번호', how='inner')
bulky_for_YZ

ranks = ["탑클래스", "골드", "로얄", "그린", "블루", "등급 없음"]
ranks_num = ['01', '02', '03', '04', '05', '09']
pop_for_stocks = []


for num in ranks_num:
  a = bulky_for_YZ['고객등급']== num
  b = bulky_for_YZ['매매구분코드']== 2
  c = bulky_for_YZ[a&b][['종목코드', '체결수량']]
  grouped = c.groupby('종목코드')
  summed = grouped.sum()
  sorted_sum = summed.sort_values(by=['체결수량'], axis=0, ascending=False)
  iem_tmp = iem[['종목코드', '종목한글명']]
  top10 = pd.merge(sorted_sum, iem_tmp, on='종목코드', how='inner')
  pop_for_stocks.append(top10.iloc[0:10][:])

import plotly.graph_objects as go
from plotly.subplots import make_subplots


fig = make_subplots(rows=2, cols=3, specs=[[{'type':'domain'}, {'type':'domain'}, {'type':'domain'}], [{'type':'domain'}, {'type':'domain'}, {'type':'domain'}]], subplot_titles=([f'<{rank}>' for rank in ranks]))
fig.add_trace(go.Pie(labels=pop_for_stocks[0]['종목한글명'], values=pop_for_stocks[0]['체결수량'], name="01"),
              1, 1)
fig.add_trace(go.Pie(labels=pop_for_stocks[1]['종목한글명'], values=pop_for_stocks[1]['체결수량'], name="02"),
              1, 2)
fig.add_trace(go.Pie(labels=pop_for_stocks[2]['종목한글명'], values=pop_for_stocks[2]['체결수량'], name="03"),
              1, 3)
fig.add_trace(go.Pie(labels=pop_for_stocks[3]['종목한글명'], values=pop_for_stocks[3]['체결수량'], name="04"),
              2, 1)
fig.add_trace(go.Pie(labels=pop_for_stocks[4]['종목한글명'], values=pop_for_stocks[4]['체결수량'], name="05"),
              2, 2)
fig.add_trace(go.Pie(labels=pop_for_stocks[5]['종목한글명'], values=pop_for_stocks[5]['체결수량'], name="09"),
              2, 3)


fig.update_traces(hole=.4, hoverinfo="label+percent+name")

fig.update_layout(
    title_text="등급별 국외 인기종목 TOP 10"
    )

fig.show()

"""<u><h2> 연령대 - 투자성향 - 고객수 heat map </h2></u>"""

yz20 = cus['연령대'] == 20
yz25 = cus['연령대'] == 25
yz30 = cus['연령대'] == 30
yz35 = cus['연령대'] == 35
ages_htmap = [yz20, yz25, yz30, yz35]

inv_type_01 = cus['고객투자성향'] == '01'
inv_type_02 = cus['고객투자성향'] == '02'
inv_type_03 = cus['고객투자성향'] == '03'
inv_type_04 = cus['고객투자성향'] == '04'
inv_type_05 = cus['고객투자성향'] == '05'
inv_type_09 = cus['고객투자성향'] == '09'
invs_htmap = [inv_type_01,inv_type_02,inv_type_03,inv_type_04,inv_type_05,inv_type_09]

import plotly.express as px


data = [ [ len(cus[i & j]) for j in invs_htmap] for i in ages_htmap]
fig = px.imshow(data,
                labels=dict(x="연령대", y="투자 성향", color="고객수"),
                x=['안전형', '안전추구형', '위험중립형', '적극투자형', '공격투자형', '전문투자형'],
                y=['20~24세', '25~29세', '30~34세', '35~39세']
               )
fig.update_xaxes(side="top")
fig.show()

import plotly.express as px
data=[[1, 25, 30, 50, 1], [20, 1, 60, 80, 30], [30, 60, 1, 5, 20]]
fig = px.imshow(data,
                dict(x="Day of Week", y="Time of Day", color="Productivity"),
                x=['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],
                y=['Morning', 'Afternoon', 'Evening']
               )
fig.update_xaxes(side="top")
fig.show()





"""연령대 - 고객등급 - 고객수 heat map"""

["탑클래스", "골드", "로얄", "그린", "블루", "등급 없음"]

















"""<h1><u> 지도 히트맵 </u></h>

한국 지리정보 json 데이터 : https://raw.githubusercontent.com/southkorea/southkorea-maps/master/kostat/2013/json/skorea_provinces_geo_simple.json

미국
"""

url = 'https://raw.githubusercontent.com/python-visualization/folium/master/examples/data'
state_geo = f'{url}/us-states.json'
state_unemployment = f'{url}/US_Unemployment_Oct2012.csv'
state_data = pd.read_csv(state_unemployment)

m = folium.Map(location=[48, -102], zoom_start=3)

folium.Choropleth(
    geo_data=state_geo,
    name='choropleth',
    data=state_data,
    columns=['State', 'Unemployment'],
    key_on='feature.id',
    fill_color='YlGn',
    fill_opacity=0.7,
    line_opacity=0.2,
    legend_name='Unemployment Rate (%)'
).add_to(m)

folium.LayerControl().add_to(m)

m

"""한국 (지역별 고객수)

41: 경기 / 11: 서울 / 48: 경남 / 26: 부산 / 27: 대구

47: 경북 / 28: 인천 / 44: 충남 / 46: 전남 / 30: 대전

29: 광주 / 43: 충북 / 45: 전북 / 42: 강원 / 31: 울산

50: 제주 / 36: 세종 / -: 해당 없음
"""

cus_eng = pd.read_csv('/content/gdrive/Shareddrives/dacom_yz/2_cus_info.csv')

yz_eng_20 = cus_eng['cus_age'] == 20
yz_eng_25 = cus_eng['cus_age'] == 25
yz_eng_30 = cus_eng['cus_age'] == 30
yz_eng_35 = cus_eng['cus_age'] == 35

cus_yz_eng = cus_eng.loc[cus_eng['cus_age'].index[yz_eng_20 | yz_eng_25 | yz_eng_30 | yz_eng_35]]

names = ['서울특별시', '경기도', '경상남도', '부산광역시','인천광역시','대구광역시', '경상북도', '충청남도', '대전광역시', '충청북도', '광주광역시', '전라북도', '전라남도', '강원도', '울산광역시', '세종특별자치시', '제주특별자치도', '?']
customers = cus_yz_eng['zip_ctp_cd'].value_counts()

tmp = pd.DataFrame({"name" : names, "customers" : customers})

tmp

"""한국 지도 viz : https://github.com/southkorea/southkorea-maps/blob/master/kostat/2013/json/skorea_provinces_geo_simple.json

한국 지도 json 데이터 : https://raw.githubusercontent.com/southkorea/southkorea-maps/master/kostat/2013/json/skorea_provinces_geo_simple.json

한국 최종
"""

tmp1 = tmp.reset_index(drop=True)
tmp1

import json
import folium
import urllib.request

state_geo = "https://raw.githubusercontent.com/southkorea/southkorea-maps/master/kostat/2013/json/skorea_provinces_geo_simple.json"

#url = "https://raw.githubusercontent.com/southkorea/southkorea-maps/master/kostat/2013/json/skorea_provinces_geo_simple.json"
#text_data = urllib.request.urlopen(url).read().decode('utf-8')
#state_geo = json.loads(text_data)

#json_data = json.loads(data)

state_data = tmp1 #tmp

m = folium.Map(location=[36.5, 128], zoom_start=7)

folium.Choropleth(
    geo_data=state_geo,
    name='choropleth',
    data=state_data,
    columns=('name', 'customers'),
    key_on='feature.properties.name',
    fill_color='YlGn',
    fill_opacity=0.7,
    line_opacity=0.2,
    legend_name='The Number of Customers'
).add_to(m)

folium.LayerControl().add_to(m)

m

"""수도권 (서울, 경기도) 에 고객이 몰려있고, 경상남도가 그 다음으로 많이 분포했으며 이외에는 비슷

<u><h3>고객수 탑3 지역 등급 분포 piechart </h3></u>

41: 경기 / 11: 서울 / 48: 경남 / 26: 부산 / 27: 대구

47: 경북 / 28: 인천 / 44: 충남 / 46: 전남 / 30: 대전

29: 광주 / 43: 충북 / 45: 전북 / 42: 강원 / 31: 울산


50: 제주 / 36: 세종 / -: 해당 없음
"""

Seoul_p = cus_yz[cus_yz['주소(시도)']=='11']['고객등급'].value_counts()
Gyeonggi_p = cus_yz[cus_yz['주소(시도)']=='41']['고객등급'].value_counts()
Gyeongsang_p = cus_yz[cus_yz['주소(시도)']=='48']['고객등급'].value_counts()

rank_indices = ['01', '02', '03', '04', '05', '09', '_ ']

Seoul_list = []
Gyeonggi_list = []
Gyeongsang_list = []

for i in rank_indices:
  try:
    Seoul_list.append(Seoul_p[i])
  except KeyError:
    Seoul_list.append(0)

for i in rank_indices:
  try:
    Gyeonggi_list.append(Gyeonggi_p[i])
  except KeyError:
    Gyeonggi_list.append(0)

for i in rank_indices:
  try:
    Gyeongsang_list.append(Gyeongsang_p[i])
  except KeyError:
    Gyeongsang_list.append(0)

import plotly.graph_objects as go
from plotly.subplots import make_subplots

rank_labels = ["탑클래스", "골드", "로얄", "그린", "블루", "등급 없음", "해당사항 없음" ]


fig = make_subplots(rows=1, cols=3, specs=[[{'type':'domain'}, {'type':'domain'}, {'type':'domain'}]])
fig.add_trace(go.Pie(labels=rank_labels, values=Seoul_list, name="Seoul"),
              1, 1)
fig.add_trace(go.Pie(labels=rank_labels, values=Gyeonggi_list, name="Gyeonggi"),
              1, 2)
fig.add_trace(go.Pie(labels=rank_labels, values=Gyeongsang_list, name="Gyeongsang"),
              1, 3)



fig.update_traces(hole=.4, hoverinfo="label+percent+name")

fig.update_layout(
    title_text="고객수 TOP 3 지역별 고객등급 분포",
    annotations=[dict(text='서울특별시', x=0.11, y=0.5, font_size=20, showarrow=False),
                 dict(text='경기도', x=0.5, y=0.5, font_size=20, showarrow=False),
                 dict(text='경상남도', x=0.88, y=0.5, font_size=20, showarrow=False)])
fig.show()

"""<u><h3>성별별 투자 성향</h3></u>

01: 안정형 / 02: 안정추구형 / 03: 위험중립형 
04: 적극투자형 / 05: 공격투자형 09: 전문투자자형 / 00:정보제공미동의 
_: 해당 사항 없음
"""

cus_yz_men = cus_yz[cus_yz['성별']==1]
cus_yz_women = cus_yz[cus_yz['성별']==2]

inv_type_men = cus_yz_men['고객투자성향'].value_counts()
inv_type_women = cus_yz_women['고객투자성향'].value_counts()

type_indices = ['01', '02', '03', '04', '05', '09', '00' '-']

men_list = []
women_list = []

for i in type_indices:
  try:
    men_list.append(inv_type_men[i])
  except KeyError:
    men_list.append(0)

for i in type_indices:
  try:
    women_list.append(inv_type_women[i])
  except KeyError:
    women_list.append(0)

type_labels = ["안정형", "안정추구형", "위험중립형", "적극투자형", "공격투자형", "전문투자형", "정보제공미동의", "해당사항 없음" ]


fig = make_subplots(rows=1, cols=2, specs=[[{'type':'domain'}, {'type':'domain'}]])
fig.add_trace(go.Pie(labels=type_labels, values=men_list, name="Men"),
              1, 1)
fig.add_trace(go.Pie(labels=type_labels, values=women_list, name="Women"),
              1, 2)


fig.update_traces(hole=.4, hoverinfo="label+percent+name")

fig.update_layout(
    title_text="성별별 투자 성향",
    annotations=[dict(text='남성 투자자', x=0.19, y=0.5, font_size=20, showarrow=False),
                 dict(text='여성 투자자', x=0.81, y=0.5, font_size=20, showarrow=False)])
fig.show()

"""남성 투자자가 여성 투자자보다 다소 공격적으로 투자함을 알 수 있었습니다.

<u><h4> stacked bar chart </h4></u>
"""

forstacked = []
for i in type_indices[0:6]:
  try:
    forstacked.append(inv_type_men[i])
  except KeyError:
    forstacked.append(0)

  try:
    forstacked.append(inv_type_women[i])
  except KeyError:
    forstacked.append(0)

data = [["안정형", "안정형" , "안정추구형", "안정추구형", "위험중립형", "위험중립형", "적극투자형","적극투자형",  "공격투자형", "공격투자형", "전문투자형", "전문투자형"],
        ['남', '여', '남', '여', '남', '여', '남', '여', '남', '여', '남', '여'],
        forstacked]

rows = zip(data[0], data[1], data[2])

headers = ['Investment Type', 'Sex', 'Count']

df = pd.DataFrame(list(rows), columns=headers)

df

#matplotlib version

#pivot_df = df.pivot(index='Type', columns='Sex', values='Value')
#pivot_df = pivot_df[['남', '여']].copy()
#pivot_df

#import matplotlib.pyplot as plt
#%matplotlib inline

#pivot_df.plot.bar(stacked=True,legend='reverse', figsize=(10,7))

fig = px.bar(df, x="Investment Type", y="Count", color="Sex", title="YZ세대 투자유형별 성비")
fig.update_traces(texttemplate='%{y:.3s}', textposition='outside')

fig.show()

"""<u><h3> 세대 / 월별 해외주식 매입 변화 </h3></u>"""

from datetime import datetime, timedelta

foreign = trd_oss
foreign['주문날짜'] = pd.to_datetime(foreign['주문날짜'], format = '%Y%m%d')
foreign

act_tmp = act.iloc[:,0:2]
cus_tmp = cus.iloc[:,0:3]
persondata = pd.merge(act_tmp, cus_tmp, on = '고객번호', how='right')
persondata

foreigndata = pd.merge(persondata, foreign, on = '계좌번호', how='right') 
foreigndata['세대'] = ['Y' if foreigndata['연령대'][i] in [25, 30, 35] else ('Z' if foreigndata['연령대'][i] in [0, 20] else 'X') for i in range(len(foreigndata)) ]
foreign_yz = foreigndata[foreigndata['세대'].isin(['Y','Z'])]
foreign_yz

foreign_y = foreign_yz[foreign_yz['세대'].isin(['Y'])]
foreign_z = foreign_yz[foreign_yz['세대'].isin(['Z'])]

#매수 데이터
buy_foreign_y = foreign_y[foreign_y['매매구분코드'] == 2]
buy_foreign_z = foreign_z[foreign_z['매매구분코드'] == 2]

buy_grouped_y = buy_foreign_y[['주문날짜', '체결수량']].groupby('주문날짜')
buy_grouped_z = buy_foreign_z[['주문날짜', '체결수량']].groupby('주문날짜')

buy_summed_y = buy_grouped_y.sum()
buy_summed_z = buy_grouped_z.sum()

buy_summed_y.reset_index(inplace=True)
buy_summed_z.reset_index(inplace=True)

#매도 데이터
sell_foreign_y = foreign_y[foreign_y['매매구분코드'] == 1]
sell_foreign_z = foreign_z[foreign_z['매매구분코드'] == 1]

sell_grouped_y = sell_foreign_y[['주문날짜', '체결수량']].groupby('주문날짜')
sell_grouped_z = sell_foreign_z[['주문날짜', '체결수량']].groupby('주문날짜')

sell_summed_y = sell_grouped_y.sum()
sell_summed_z = sell_grouped_z.sum()

sell_summed_y.reset_index(inplace=True)
sell_summed_z.reset_index(inplace=True)

"""<u><h4>-세대별 해외주식 매수 트렌드 </h4></u>"""

layout = go.Layout(title = '세대별 해외주식 매수 트렌드')
fig = go.Figure(data = [
                        go.Scatter(x = buy_summed_y['주문날짜'], y = buy_summed_y['체결수량'], line_shape = 'linear', name = 'Y'),
                        go.Scatter(x = buy_summed_z['주문날짜'], y = buy_summed_z['체결수량'], line_shape = 'linear', name = 'Z')
], layout = layout)
fig.update_xaxes(linecolor = 'rgb(0, 0, 0)')
fig.update_layout(title = {'y': 0.87, 'x': 0.5, 'xanchor': 'center', 'yanchor': 'top'})
fig.update_layout(plot_bgcolor = 'rgb(255, 255, 255)')

"""<u><h4>-세대별 해외주식 매도 트렌드 </h4></u>"""

layout = go.Layout(title = '세대별 해외주식 매도 트렌드')
fig = go.Figure(data = [
                        go.Scatter(x = sell_summed_y['주문날짜'], y = sell_summed_y['체결수량'], line_shape = 'linear', name = 'Y'),
                        go.Scatter(x = sell_summed_z['주문날짜'], y = sell_summed_z['체결수량'], line_shape = 'linear', name = 'Z')
], layout = layout)
fig.update_xaxes(linecolor = 'rgb(0, 0, 0)')
fig.update_layout(title = {'y': 0.87, 'x': 0.5, 'xanchor': 'center', 'yanchor': 'top'})
fig.update_layout(plot_bgcolor = 'rgb(255, 255, 255)')

























"""<h1> Abandonded </h1>"""

'''# 1남성 / 2여성
sex_counts = cus['sex_dit_cd'].value_counts()

explode = [0.05, 0.05]
#colors = ['#ff9999', '#ffc000', '#8fd9b6', '#d395d0']
colors = ['#ffc000', '#ff9999']


fig, ax = plt.subplots(1,2,figsize=(20,15))


ax[0].bar(['male', 'female'],[sex_counts[1], sex_counts[2]], color = colors)
ax[1].pie([sex_counts[1], sex_counts[2]], labels=['male', 'female'], autopct='%.1f%%', startangle=260, counterclock=False, explode=explode, shadow=True, colors=colors) #textprops={'fontsize': 25}


#plt.scatter(['male', 'female'], [sex_counts[1], sex_counts[2]], marker= 'o', s=400, color= 'red', alpha=0.5)
plt.rcParams.update({'font.size': 20})

plt.show()'''

'''p = cus['연령대'].value_counts()
p.sort_index(inplace=True)

explode = [0.2, 0.15, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.15, 0.2, 0.25]
#colors = ['#ff9999', '#ffc000', '#8fd9b6', '#d395d0']
ages = ['≤19', '20~24', '25~29', '30~34', '35~39', '40~44', '45~49', '50~54', '55~59', '60~64', '65~69', '≤70']
colors = ['#a5d98f', '#8fd9b6', '#8fd9cf', '#8fc7d9', '#8fa0d9', '#a28fd9', '#b98fd9', '#c78fd9', '#d395d0', '#d395b8', '#d395a6', '#d39595']


fig, ax = plt.subplots(1, 2,figsize=(20,15))



ax[0].bar(ages,[p[i] for i in [0,20,25,30,35,40,45,50,55,60,65,70]], color = colors)
ax[1].pie([p[i] for i in [0,20,25,30,35,40,45,50,55,60,65,70]], labels = ages, autopct='%.1f%%', startangle=260, counterclock=False, explode=explode, shadow=True, colors=colors) #textprops={'fontsize': 10}

plt.rcParams.update({'font.size': 20})

ax[0].tick_params(labelrotation=45)
ax[0].set_title('v = 1',fontweight="bold", size=20)

plt.show()'''

'''pip install wordcloud

from wordcloud import WordCloud 

word_01 = pop_stocks[0][['체결수량', '종목한글명']]
frequencies = word_01.set_index("종목한글명").to_dict()["체결수량"]

wordcloud = WordCloud(font_path='C:\\Users\\hewas\\AppData\\Local\\Microsoft\\Windows\\Fonts\\BMDOHYEON_ttf.ttf', background_color="white", max_words=20000,max_font_size=300).generate_from_frequencies(frequencies)

plt.imshow(wordcloud)
plt.axis('off')
plt.show()
'''

