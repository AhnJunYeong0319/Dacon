# -*- coding: utf-8 -*-
"""Jun_YZ1228.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-j0qzKPNxUh_CI9U-TW-MeXQBEFadiBc
"""

import matplotlib as mpl
import pandas as pd
from google.colab import drive
import matplotlib.pyplot as plt
import matplotlib
import numpy as np
import seaborn as sns
import plotly.express as px 
import plotly
import folium

drive.mount('/content/gdrive')

act = pd.read_csv('/content/gdrive/Shareddrives/dacom_yz/2_act_info.csv')
cus = pd.read_csv('/content/gdrive/Shareddrives/dacom_yz/2_cus_info.csv')
iem = pd.read_csv('/content/gdrive/Shareddrives/dacom_yz/2_iem_info.csv')
trd_kr = pd.read_csv('/content/gdrive/Shareddrives/dacom_yz/2_trd_kr.csv')
trd_oss = pd.read_csv('/content/gdrive/Shareddrives/dacom_yz/2_trd_oss.csv')
#data_schema_vf.xlsx

# 1남성 / 2여성
sex_counts = cus['sex_dit_cd'].value_counts()

explode = [0.05, 0.05]
#colors = ['#ff9999', '#ffc000', '#8fd9b6', '#d395d0']
colors = ['#ffc000', '#ff9999']


fig, ax = plt.subplots(1,2,figsize=(20,15))


ax[0].bar(['male', 'female'],[sex_counts[1], sex_counts[2]], color = colors)
ax[1].pie([sex_counts[1], sex_counts[2]], labels=['male', 'female'], autopct='%.1f%%', startangle=260, counterclock=False, explode=explode, shadow=True, colors=colors) #textprops={'fontsize': 25}


#plt.scatter(['male', 'female'], [sex_counts[1], sex_counts[2]], marker= 'o', s=400, color= 'red', alpha=0.5)
plt.rcParams.update({'font.size': 20})

plt.show()

p = cus['cus_age'].value_counts()
p.sort_index(inplace=True)

explode = [0.2, 0.15, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.15, 0.2, 0.25]
#colors = ['#ff9999', '#ffc000', '#8fd9b6', '#d395d0']
ages = ['≤19', '20~24', '25~29', '30~34', '35~39', '40~44', '45~49', '50~54', '55~59', '60~64', '65~69', '≤70']
colors = ['#a5d98f', '#8fd9b6', '#8fd9cf', '#8fc7d9', '#8fa0d9', '#a28fd9', '#b98fd9', '#c78fd9', '#d395d0', '#d395b8', '#d395a6', '#d39595']


fig, ax = plt.subplots(1, 2,figsize=(20,15))



ax[0].bar(ages,[p[i] for i in [0,20,25,30,35,40,45,50,55,60,65,70]], color = colors)
ax[1].pie([p[i] for i in [0,20,25,30,35,40,45,50,55,60,65,70]], labels = ages, autopct='%.1f%%', startangle=260, counterclock=False, explode=explode, shadow=True, colors=colors) #textprops={'fontsize': 10}

plt.rcParams.update({'font.size': 20})

ax[0].tick_params(labelrotation=45)
ax[0].set_title('v = 1',fontweight="bold", size=20)

plt.show()



"""<h1><span style="background-color:yellow;">--------------------------------12-23 이후------------------------------- </span></h1>

한글 컬럼
"""

act.columns = ['계좌번호', '고객번호', '계좌개설월']
cus.columns = ['고객번호', '성별', '연령대', '주소(시도)', '고객등급', '고객투자성향']
iem.columns = ['종목코드', '종목영문명', '종목한글명']
trd_kr.columns = ['계좌번호','주문날짜','주문순서','주문접수시간대','최종체결시간대','종목코드','매매구분코드','체결수량','체결가격','주문매체구분코드']
trd_oss.columns = ['계좌번호','주문날짜','주문순서','주문접수시간대','최종체결시간대','종목코드','매매구분코드','체결수량','체결가격','주문매체구분코드','거래통화코드','거래통화환율']



yz20 = cus['연령대'] == 20
yz25 = cus['연령대'] == 25
yz30 = cus['연령대'] == 30
yz35 = cus['연령대'] == 35

cus_yz = cus.loc[cus['연령대'].index[yz20 | yz25 | yz30 | yz35]]
cus_y = cus.loc[cus['연령대'].index[yz20 | yz25]]
cus_z = cus.loc[cus['연령대'].index[yz30 | yz35]]





sex_counts_yz = cus_yz['성별'].value_counts()

explode = [0.05, 0.05]
#colors = ['#ff9999', '#ffc000', '#8fd9b6', '#d395d0']
colors = ['#ffc000', '#ff9999']


fig, ax = plt.subplots(1,2,figsize=(20,15))


ax[0].bar(['male', 'female'],[sex_counts_yz[1], sex_counts_yz[2]], color = colors)
ax[1].pie([sex_counts_yz[1], sex_counts_yz[2]], labels=['male', 'female'], autopct='%.1f%%', startangle=260, counterclock=False, explode=explode, shadow=True, colors=colors) #textprops={'fontsize': 25}

ax[0].set_title('XY gender ratio bar chart')
ax[1].set_title('XY gender ratio pie chart')

#plt.scatter(['male', 'female'], [sex_counts[1], sex_counts[2]], marker= 'o', s=400, color= 'red', alpha=0.5)
plt.rcParams.update({'font.size': 20})

plt.show()



"""X, Y, Z세대 비율"""

ages = cus['연령대'].value_counts()
ages.sort_index(inplace=True)

X = ages[40] + ages[45] + ages[50] + ages[55] + ages[60] + ages[65] + ages[70]
Y =  ages[30] + ages[35]
Z =  + ages[20] + ages[25]

explode = [0.05, 0.05, 0.05]
#colors = ['#ff9999', '#ffc000', '#8fd9b6', '#d395d0']
ages_range = ['X', 'Y', 'Z']
colors = ['#a5d98f', '#8fd9b6', '#8fd9cf', '#8fc7d9', '#8fa0d9', '#a28fd9', '#b98fd9', '#c78fd9', '#d395d0', '#d395b8', '#d395a6', '#d39595']


fig, ax = plt.subplots(1, 2,figsize=(20,15))



ax[0].bar(ages_range,[X, Y, Z], color = colors)
ax[1].pie([X, Y, Z], labels = ages_range, autopct='%.1f%%', startangle=260, counterclock=False, explode=explode, shadow=True, colors=colors) #textprops={'fontsize': 10}

plt.rcParams.update({'font.size': 20})

ax[0].tick_params(labelrotation=0)
ax[0].set_title('X, Y, Z',fontweight="bold", size=20)

plt.show()

"""세대가 표시된 trd_kr 데이터 (고객정보 포함)"""

act_tmp = act.iloc[:,0:2]
cus_tmp = cus.iloc[:,0:3]

result = pd.merge(act_tmp, cus_tmp, on = '고객번호', how='right')
mydata = pd.merge(result, trd_kr, on = '계좌번호', how='right') #trd_oss
mydata

mydata['세대'] = ['Y' if mydata['연령대'][i] in [30, 35] else ('Z' if mydata['연령대'][i] in [20, 25] else 'X') for i in range(len(mydata)) ]
mydata

#sell = mydata[mydata['매매구분코드']==1]
#buy = mydata[mydata['매매구분코드']==2]

YZ = mydata[mydata['세대'].isin(['Y','Z'])]

Y = mydata[mydata['세대'].isin(['Y'])]
Z = mydata[mydata['세대'].isin(['Z'])]

"""세대가 표시된 trd_oss 데이터 (고객정보 포함)"""

act_tmp = act.iloc[:,0:2]
cus_tmp = cus.iloc[:,0:3]

result = pd.merge(act_tmp, cus_tmp, on = '고객번호', how='right')
mydata_for = pd.merge(result, trd_oss, on = '계좌번호', how='right') #trd_oss
mydata_for

mydata_for['세대'] = ['Y' if mydata_for['연령대'][i] in [30, 35] else ('Z' if mydata_for['연령대'][i] in [20, 25] else 'X') for i in range(len(mydata_for)) ]
mydata_for

#sell = mydata[mydata['매매구분코드']==1]
#buy = mydata[mydata['매매구분코드']==2]

YZ_for = mydata_for[mydata_for['세대'].isin(['Y','Z'])]

Y_for = mydata_for[mydata_for['세대'].isin(['Y'])]
Z_for = mydata_for[mydata_for['세대'].isin(['Z'])]

"""<h1><u> 주문매체 </u></h>

YZ세대 주문 매체
"""

idx = sorted(YZ['주문매체구분코드'].value_counts().index)
ORR_MDI = ['BranchTerminal', 'Wired-Terminal', 'Wireless MTS', 'HTS' ]

plt.figure(figsize=(20,8))
plt.bar([ ORR_MDI[j-1] for j in idx], [YZ['주문매체구분코드'].value_counts()[i] for i in idx], color=['#a5d98f', '#8fd9b6', '#8fd9cf'])


'''x = [1,2,3,4,5]
y = [100,200,300,400,500]

import matplotlib.pyplot as plt

plt.bar(x,y)'''

for i in range(3):
  plt.text([ORR_MDI[j-1] for j in idx][i], [YZ['주문매체구분코드'].value_counts()[i] for i in idx][i], '{}'.format([YZ['주문매체구분코드'].value_counts()[i] for i in idx][i]) )
plt.title('Y&Z Generation Order Media')
plt.show()

"""YZ세대 성별별 주문매체"""

YZ_men = YZ[YZ['성별']==1]
YZ_women = YZ[YZ['성별']==2]

[YZ['주문매체구분코드'].value_counts()[i] for i in idx]

labels = [ ORR_MDI[j-1] for j in idx]
men_means = [YZ_men['주문매체구분코드'].value_counts()[i] for i in idx]
women_means = [YZ_women['주문매체구분코드'].value_counts()[i] for i in idx]

x = np.arange(len(labels))  # the label locations
width = 0.35  # the width of the bars

fig, ax = plt.subplots(figsize=(20,10))
rects1 = ax.bar(x - width/2, men_means, width, color='#ffc000', label='Men')
rects2 = ax.bar(x + width/2, women_means, width, color='#ff9999', label='Women')

# Add some text for labels, title and custom x-axis tick labels, etc.
ax.set_ylabel('Counts')
ax.set_title('Y&Z Generation Order Media by Gender')
ax.set_xticks(x)
ax.set_xticklabels(labels)
ax.legend()


def autolabel(rects):
    """Attach a text label above each bar in *rects*, displaying its height."""
    for rect in rects:
        height = rect.get_height()
        ax.annotate('{}'.format(height),
                    xy=(rect.get_x() + rect.get_width() / 2, height),
                    xytext=(0, 5),  # 3 points vertical offset
                    textcoords="offset points",
                    ha='center', va='bottom')


autolabel(rects1)
autolabel(rects2)


#fig.tight_layout()

plt.show()

"""<h1><u> 국내 주문접수시간대 </u></h>

따로
"""

times = sorted(YZ['주문접수시간대'].value_counts().index)


YZ_men = YZ[YZ['성별']==1]
times_men = sorted(YZ_men['주문접수시간대'].value_counts().index)

YZ_women = YZ[YZ['성별']==2]
times_women = sorted(YZ_women['주문접수시간대'].value_counts().index)


fig, ax= plt.subplots(1,3, figsize=(20,8))


ax[0].plot( times, [YZ['주문접수시간대'].value_counts()[i] for i in times])
ax[0].set_title('Order Time')

ax[1].plot( times_men, [YZ_men['주문접수시간대'].value_counts()[i] for i in times_men], color='#ffc000')
ax[1].set_title('Order Time (Men)')

ax[2].plot( times_women, [YZ_women['주문접수시간대'].value_counts()[i] for i in times_women], color='#ff9999')
ax[2].set_title('Order Time (Women)')

"""한 번에"""

times = sorted(YZ['주문접수시간대'].value_counts().index)


YZ_men = YZ[YZ['성별']==1]
times_men = sorted(YZ_men['주문접수시간대'].value_counts().index)

YZ_women = YZ[YZ['성별']==2]
times_women = sorted(YZ_women['주문접수시간대'].value_counts().index)




plt.figure(figsize=(20,8))
plt.plot( times, [YZ['주문접수시간대'].value_counts()[i] for i in times])
plt.plot( times_men, [YZ_men['주문접수시간대'].value_counts()[i] for i in times_men], '#ffc000')
plt.plot( times_women, [YZ_women['주문접수시간대'].value_counts()[i] for i in times_women], '#ff9999')
plt.xlabel('Time', color='white')
plt.ylabel('Orders', color='white')
plt.xticks(times)

plt.grid(True)
plt.legend(['Whole', 'Men', 'Women'], loc='upper left')

plt.title('Order Time', color='white')

"""<h1><u> 국외 주문접수시간대 </u></h>"""

times = sorted(YZ_for['주문접수시간대'].value_counts().index)


YZ_for_men = YZ_for[YZ_for['성별']==1]
times_men = sorted(YZ_for_men['주문접수시간대'].value_counts().index)

YZ_for_women = YZ_for[YZ_for['성별']==2]
times_women = sorted(YZ_for_women['주문접수시간대'].value_counts().index)

fig, ax= plt.subplots(1,3, figsize=(20,8))


ax[0].plot(times, [YZ_for['주문접수시간대'].value_counts()[i] for i in times])
ax[0].set_title('Order Time')

ax[1].plot( times_men, [YZ_for_men['주문접수시간대'].value_counts()[i] for i in times_men], color='#ffc000')
ax[1].set_title('Order Time (Men)')

ax[2].plot( times_women, [YZ_for_women['주문접수시간대'].value_counts()[i] for i in times_women], color='#ff9999')
ax[2].set_title('Order Time (Women)')

"""한 번에"""

times = sorted(YZ_for['주문접수시간대'].value_counts().index)


YZ_for_men = YZ_for[YZ_for['성별']==1]
times_men = sorted(YZ_for_men['주문접수시간대'].value_counts().index)

YZ_for_women = YZ_for[YZ_for['성별']==2]
times_women = sorted(YZ_for_women['주문접수시간대'].value_counts().index)




plt.figure(figsize=(20,8))
plt.plot( times, [YZ_for['주문접수시간대'].value_counts()[i] for i in times])
plt.plot( times_men, [YZ_for_men['주문접수시간대'].value_counts()[i] for i in times_men], '#ffc000')
plt.plot( times_women, [YZ_for_women['주문접수시간대'].value_counts()[i] for i in times_women], '#ff9999')
plt.xlabel('Time', color='white')
plt.ylabel('Orders', color='white')
plt.xticks(times)

plt.grid(True)
plt.legend(['Whole', 'Men', 'Women'], loc='upper left')

plt.title('Order Time', color='white')

"""<h1><u> 계좌계설월 </u></h>
- 흥미도 구하면, 어따 쓰지? (수익에 관련시켜야 할 듯ㅁ)

계좌가 많은 사람
"""

act_eng = pd.read_csv('/content/gdrive/Shareddrives/dacom_yz/2_act_info.csv')
cus_eng = pd.read_csv('/content/gdrive/Shareddrives/dacom_yz/2_cus_info.csv')
iem_eng = pd.read_csv('/content/gdrive/Shareddrives/dacom_yz/2_iem_info.csv')
trd_kr_eng = pd.read_csv('/content/gdrive/Shareddrives/dacom_yz/2_trd_kr.csv')
trd_oss_eng = pd.read_csv('/content/gdrive/Shareddrives/dacom_yz/2_trd_oss.csv')

act_eng[act_eng['cus_id']=='607b5194a54ec30991a86a4dee5a6e2a85924244fde2e0047d4917db2e93452f']

cus_eng[cus_eng['cus_id']=='607b5194a54ec30991a86a4dee5a6e2a85924244fde2e0047d4917db2e93452f']['tco_cus_grd_cd']

"""Y / Z 분리해서 개설일부터 날짜 카운트 -> 수익?"""





"""Y / Z 분리해서 개설일부터 날짜 카운트 -> 거래량?"""











"""<h3> 등급별 수익 box plot </h3>"""

#act num : 계좌 개수
#trd num : 매도 + 매수 합친 횟수
profit = pd.read_csv('/content/gdrive/Shareddrives/dacom_yz/cus_inf.csv')

profit['total_profit'] = profit['money_earn'] + profit['money_have']

cus_eng = pd.read_csv('/content/gdrive/Shareddrives/dacom_yz/2_cus_info.csv')

yz20 = cus_eng['cus_age'] == 20
yz25 = cus_eng['cus_age'] == 25
yz30 = cus_eng['cus_age'] == 30
yz35 = cus_eng['cus_age'] == 35

cus_yz_eng = cus_eng.loc[cus_eng['cus_age'].index[yz20 | yz25 | yz30 | yz35]]

profit_yz = pd.merge(cus_yz_eng, profit, on = 'cus_id', how='inner')

import plotly.graph_objects as go
import numpy as np

fig = go.Figure()
fig.add_trace(go.Box(y=profit_yz[profit_yz['tco_cus_grd_cd']=='01']['total_profit'], name='탑클래스'))
fig.add_trace(go.Box(y=profit_yz[profit_yz['tco_cus_grd_cd']=='02']['total_profit'], name='골드'))
fig.add_trace(go.Box(y=profit_yz[profit_yz['tco_cus_grd_cd']=='03']['total_profit'], name='로얄'))
fig.add_trace(go.Box(y=profit_yz[profit_yz['tco_cus_grd_cd']=='04']['total_profit'], name='그린'))
fig.add_trace(go.Box(y=profit_yz[profit_yz['tco_cus_grd_cd']=='05']['total_profit'], name='블루'))
fig.add_trace(go.Box(y=profit_yz[profit_yz['tco_cus_grd_cd']=='09']['total_profit'], name='등급없음'))
fig.add_trace(go.Box(y=profit_yz[profit_yz['tco_cus_grd_cd']==' _']['total_profit'], name='해당사항없음'))

fig.show()

"""등급마다 산정 기준이 정확히 N배 되는 것이 아니기 때문에 정확한 수익 수치는 중요하지 않습니다. 다만, box plot에서 알 수 있듯이 5등급과 9등급은 상하로 반면, 나머지 등급은 -가 더 많고, 01등급은..

<h3> 투자 성향별 수익 box plot </h3>
"""

import plotly.graph_objects as go
import numpy as np

fig = go.Figure()
fig.add_trace(go.Box(y=profit_yz[profit_yz['ivs_icn_cd']=='01']['total_profit'], name='안전형'))
fig.add_trace(go.Box(y=profit_yz[profit_yz['ivs_icn_cd']=='02']['total_profit'], name='안전추구형'))
fig.add_trace(go.Box(y=profit_yz[profit_yz['ivs_icn_cd']=='03']['total_profit'], name='위험중립형'))
fig.add_trace(go.Box(y=profit_yz[profit_yz['ivs_icn_cd']=='04']['total_profit'], name='적극투자형'))
fig.add_trace(go.Box(y=profit_yz[profit_yz['ivs_icn_cd']=='05']['total_profit'], name='공격투자형'))
fig.add_trace(go.Box(y=profit_yz[profit_yz['ivs_icn_cd']=='09']['total_profit'], name='전문투자형'))
fig.add_trace(go.Box(y=profit_yz[profit_yz['ivs_icn_cd']=='00']['total_profit'], name='정보제공미동의'))
fig.add_trace(go.Box(y=profit_yz[profit_yz['ivs_icn_cd']=='-']['total_profit'], name='해당 없음'))

fig.show()

"""전문 투자자형이 눈에 띄게 좋은 수익률을 보여주고, 나머지 유형에는 별 다른 패턴이 없었으나 주로 공격적일 수록 - 포인트가 많아진다는 사실을 알 수 있습니다.

등급별 국내 인기 종목(체결수량 기준) pie chart
"""

tmpcus = cus_yz.drop(['성별', '연령대'], axis=1)
tmpcus

bulky_YZ = pd.merge(YZ, tmpcus, on='고객번호', how='right')
bulky_YZ

ranks = ["탑클래스", "골드", "로얄", "그린", "블루", "등급 없음"]
ranks_num = ['01', '02', '03', '04', '05', '09']
pop_stocks = []


for num in ranks_num:
  a = bulky_YZ['고객등급']== num
  b = bulky_YZ['매매구분코드']== 2
  c = bulky_YZ[a&b][['종목코드', '체결수량']]
  grouped = c.groupby('종목코드')
  summed = grouped.sum()
  sorted_sum = summed.sort_values(by=['체결수량'], axis=0, ascending=False)
  iem_tmp = iem[['종목코드', '종목한글명']]
  top10 = pd.merge(sorted_sum, iem_tmp, on='종목코드', how='inner')
  pop_stocks.append(top10.iloc[0:10][:])

import plotly.graph_objects as go
from plotly.subplots import make_subplots


# Create subplots: use 'domain' type for Pie subplot
fig = make_subplots(rows=2, cols=3, specs=[[{'type':'domain'}, {'type':'domain'}, {'type':'domain'}], [{'type':'domain'}, {'type':'domain'}, {'type':'domain'}]], subplot_titles=([f'<{rank}>' for rank in ranks]))
fig.add_trace(go.Pie(labels=pop_stocks[0]['종목한글명'], values=pop_stocks[0]['체결수량'], name="01"),
              1, 1)
fig.add_trace(go.Pie(labels=pop_stocks[1]['종목한글명'], values=pop_stocks[1]['체결수량'], name="02"),
              1, 2)
fig.add_trace(go.Pie(labels=pop_stocks[2]['종목한글명'], values=pop_stocks[2]['체결수량'], name="03"),
              1, 3)
fig.add_trace(go.Pie(labels=pop_stocks[3]['종목한글명'], values=pop_stocks[3]['체결수량'], name="04"),
              2, 1)
fig.add_trace(go.Pie(labels=pop_stocks[4]['종목한글명'], values=pop_stocks[4]['체결수량'], name="05"),
              2, 2)
fig.add_trace(go.Pie(labels=pop_stocks[5]['종목한글명'], values=pop_stocks[5]['체결수량'], name="09"),
              2, 3)


# Use `hole` to create a donut-like pie chart
fig.update_traces(hole=.4, hoverinfo="label+percent+name")

fig.update_layout(
    title_text="등급별 인기종목 TOP 10",
    # Add annotations in the center of the donut pies.
    )

fig.show()

"""등급별 국외 인기 종목(체결량 기준)pie chart"""

tmpcus = cus_yz.drop(['성별', '연령대'], axis=1)
tmpcus

bulky_for_YZ = pd.merge(YZ_for, tmpcus, on='고객번호', how='inner')
bulky_for_YZ

ranks = ["탑클래스", "골드", "로얄", "그린", "블루", "등급 없음"]
ranks_num = ['01', '02', '03', '04', '05', '09']
pop_for_stocks = []


for num in ranks_num:
  a = bulky_for_YZ['고객등급']== num
  b = bulky_for_YZ['매매구분코드']== 2
  c = bulky_for_YZ[a&b][['종목코드', '체결수량']]
  grouped = c.groupby('종목코드')
  summed = grouped.sum()
  sorted_sum = summed.sort_values(by=['체결수량'], axis=0, ascending=False)
  iem_tmp = iem[['종목코드', '종목한글명']]
  top10 = pd.merge(sorted_sum, iem_tmp, on='종목코드', how='inner')
  pop_for_stocks.append(top10.iloc[0:10][:])

import plotly.graph_objects as go
from plotly.subplots import make_subplots


# Create subplots: use 'domain' type for Pie subplot
fig = make_subplots(rows=2, cols=3, specs=[[{'type':'domain'}, {'type':'domain'}, {'type':'domain'}], [{'type':'domain'}, {'type':'domain'}, {'type':'domain'}]], subplot_titles=([f'<{rank}>' for rank in ranks]))
fig.add_trace(go.Pie(labels=pop_for_stocks[0]['종목한글명'], values=pop_for_stocks[0]['체결수량'], name="01"),
              1, 1)
fig.add_trace(go.Pie(labels=pop_for_stocks[1]['종목한글명'], values=pop_for_stocks[1]['체결수량'], name="02"),
              1, 2)
fig.add_trace(go.Pie(labels=pop_for_stocks[2]['종목한글명'], values=pop_for_stocks[2]['체결수량'], name="03"),
              1, 3)
fig.add_trace(go.Pie(labels=pop_for_stocks[3]['종목한글명'], values=pop_for_stocks[3]['체결수량'], name="04"),
              2, 1)
fig.add_trace(go.Pie(labels=pop_for_stocks[4]['종목한글명'], values=pop_for_stocks[4]['체결수량'], name="05"),
              2, 2)
fig.add_trace(go.Pie(labels=pop_for_stocks[5]['종목한글명'], values=pop_for_stocks[5]['체결수량'], name="09"),
              2, 3)


# Use `hole` to create a donut-like pie chart
fig.update_traces(hole=.4, hoverinfo="label+percent+name")

fig.update_layout(
    title_text="등급별 인기종목 TOP 10",
    # Add annotations in the center of the donut pies.
    )

fig.show()







"""등급별 인기 종목 word cloud"""

pip install wordcloud

# Commented out IPython magic to ensure Python compatibility.
from wordcloud import WordCloud 

'''import matplotlib.pyplot as plt


# %matplotlib inline

import matplotlib
from IPython.display import set_matplotlib_formats
matplotlib.rc('font',family = 'NanumGothic_0')

set_matplotlib_formats('retina')

matplotlib.rc('axes',unicode_minus = False)'''

word_01 = pop_stocks[0][['체결수량', '종목한글명']]
frequencies = word_01.set_index("종목한글명").to_dict()["체결수량"]

wordcloud = WordCloud(font_path='C:\\Users\\hewas\\AppData\\Local\\Microsoft\\Windows\\Fonts\\BMDOHYEON_ttf.ttf', background_color="white", max_words=20000,max_font_size=300).generate_from_frequencies(frequencies)

plt.imshow(wordcloud)
plt.axis('off')
plt.show()

frequencies.keys()

word_01['종목한글명']

"""<h2> 연령대 - 투자성향 - 고객수 heat map </h2>"""

yz20 = cus['연령대'] == 20
yz25 = cus['연령대'] == 25
yz30 = cus['연령대'] == 30
yz35 = cus['연령대'] == 35
ages_htmap = [yz20, yz25, yz30, yz35]

inv_type_01 = cus['고객투자성향'] == '01'
inv_type_02 = cus['고객투자성향'] == '02'
inv_type_03 = cus['고객투자성향'] == '03'
inv_type_04 = cus['고객투자성향'] == '04'
inv_type_05 = cus['고객투자성향'] == '05'
inv_type_09 = cus['고객투자성향'] == '09'
invs_htmap = [inv_type_01,inv_type_02,inv_type_03,inv_type_04,inv_type_05,inv_type_09]

len(cus[yz20 & inv_type_09])

import plotly.express as px


data = [ [ len(cus[i & j]) for j in invs_htmap] for i in ages_htmap]
#data=[[1, 25, 30, 50, 1], [20, 1, 60, 80, 30], [30, 60, 1, 5, 20]]
fig = px.imshow(data,
                labels=dict(x="연령대", y="투자 성향", color="고객수"),
                x=['안전형', '안전추구형', '위험중립형', '적극투자형', '공격투자형', '전문투자형'],
                y=['20~24세', '25~29세', '30~34세', '35~39세']
               )
fig.update_xaxes(side="top")
fig.show()

import plotly.express as px
data=[[1, 25, 30, 50, 1], [20, 1, 60, 80, 30], [30, 60, 1, 5, 20]]
fig = px.imshow(data,
                dict(x="Day of Week", y="Time of Day", color="Productivity"),
                x=['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],
                y=['Morning', 'Afternoon', 'Evening']
               )
fig.update_xaxes(side="top")
fig.show()





"""연령대 - 고객등급 - 고객수 heat map"""

["탑클래스", "골드", "로얄", "그린", "블루", "등급 없음"]

















"""<h1><u> 지도 히트맵 </u></h>"""

pip install -U plotly

"""한국 지리정보 json 데이터 : https://raw.githubusercontent.com/southkorea/southkorea-maps/master/kostat/2013/json/skorea_provinces_geo_simple.json

미국
"""

url = 'https://raw.githubusercontent.com/python-visualization/folium/master/examples/data'
state_geo = f'{url}/us-states.json'
state_unemployment = f'{url}/US_Unemployment_Oct2012.csv'
state_data = pd.read_csv(state_unemployment)

m = folium.Map(location=[48, -102], zoom_start=3)

folium.Choropleth(
    geo_data=state_geo,
    name='choropleth',
    data=state_data,
    columns=['State', 'Unemployment'],
    key_on='feature.id',
    fill_color='YlGn',
    fill_opacity=0.7,
    line_opacity=0.2,
    legend_name='Unemployment Rate (%)'
).add_to(m)

folium.LayerControl().add_to(m)

m

"""한국 (지역별 고객수)"""

'''41: 경기 / 11: 서울 / 48: 경남 / 26: 부산 / 27: 대구

47: 경북 / 28: 인천 / 44: 충남 / 46: 전남 / 30: 대전

29: 광주 / 43: 충북 / 45: 전북 / 42: 강원 / 31: 울산


50: 제주 / 36: 세종 / -: 해당 없음'''

cus_eng = pd.read_csv('/content/gdrive/Shareddrives/dacom_yz/2_cus_info.csv')

yz_eng_20 = cus_eng['cus_age'] == 20
yz_eng_25 = cus_eng['cus_age'] == 25
yz_eng_30 = cus_eng['cus_age'] == 30
yz_eng_35 = cus_eng['cus_age'] == 35

cus_yz_eng = cus_eng.loc[cus_eng['cus_age'].index[yz_eng_20 | yz_eng_25 | yz_eng_30 | yz_eng_35]]

names = ['서울특별시', '경기도', '경상남도', '부산광역시','인천광역시','대구광역시', '경상북도', '충청남도', '대전광역시', '충청북도', '광주광역시', '전라북도', '전라남도', '강원도', '울산광역시', '세종특별자치시', '제주특별자치도', '?']
customers = cus_yz_eng['zip_ctp_cd'].value_counts()

tmp = pd.DataFrame({"name" : names, "customers" : customers})

tmp

"""한국 지도 viz : https://github.com/southkorea/southkorea-maps/blob/master/kostat/2013/json/skorea_provinces_geo_simple.json

한국 지도 json 데이터 : https://raw.githubusercontent.com/southkorea/southkorea-maps/master/kostat/2013/json/skorea_provinces_geo_simple.json

한국 최종
"""

tmp1 = tmp.reset_index(drop=True)
tmp1



import json
import folium
import urllib.request

state_geo = "https://raw.githubusercontent.com/southkorea/southkorea-maps/master/kostat/2013/json/skorea_provinces_geo_simple.json"

#url = "https://raw.githubusercontent.com/southkorea/southkorea-maps/master/kostat/2013/json/skorea_provinces_geo_simple.json"
#text_data = urllib.request.urlopen(url).read().decode('utf-8')
#state_geo = json.loads(text_data)

#json_data = json.loads(data)

state_data = tmp1 #tmp

m = folium.Map(location=[36.5, 128], zoom_start=7)

folium.Choropleth(
    geo_data=state_geo,
    name='choropleth',
    data=state_data,
    #data=state_data,
    columns=('name', 'customers'),
    #columns=['name', 'customers'],
    key_on='feature.properties.name',
    #key_on='feature.properties.names',
    #fill_color='RdPu',
    fill_color='YlGn',
    fill_opacity=0.7,
    line_opacity=0.2,
    legend_name='The Number of Customers'
).add_to(m)

folium.LayerControl().add_to(m)

m

"""고객수 탑3 지역 등급 분포 piechart

41: 경기 / 11: 서울 / 48: 경남 / 26: 부산 / 27: 대구

47: 경북 / 28: 인천 / 44: 충남 / 46: 전남 / 30: 대전

29: 광주 / 43: 충북 / 45: 전북 / 42: 강원 / 31: 울산


50: 제주 / 36: 세종 / -: 해당 없음
"""

Seoul_p = cus_yz[cus_yz['주소(시도)']=='11']['고객등급'].value_counts()
Gyeonggi_p = cus_yz[cus_yz['주소(시도)']=='41']['고객등급'].value_counts()
Gyeongsang_p = cus_yz[cus_yz['주소(시도)']=='48']['고객등급'].value_counts()

rank_indices = ['01', '02', '03', '04', '05', '09', '_ ']

Seoul_list = []
Gyeonggi_list = []
Gyeongsang_list = []

for i in rank_indices:
  try:
    Seoul_list.append(Seoul_p[i])
  except KeyError:
    Seoul_list.append(0)

for i in rank_indices:
  try:
    Gyeonggi_list.append(Gyeonggi_p[i])
  except KeyError:
    Gyeonggi_list.append(0)

for i in rank_indices:
  try:
    Gyeongsang_list.append(Gyeongsang_p[i])
  except KeyError:
    Gyeongsang_list.append(0)

import plotly.graph_objects as go
from plotly.subplots import make_subplots

rank_labels = ["탑클래스", "골드", "로얄", "그린", "블루", "등급 없음", "해당사항 없음" ]

# Create subplots: use 'domain' type for Pie subplot
fig = make_subplots(rows=1, cols=3, specs=[[{'type':'domain'}, {'type':'domain'}, {'type':'domain'}]])
fig.add_trace(go.Pie(labels=rank_labels, values=Seoul_list, name="Seoul"),
              1, 1)
fig.add_trace(go.Pie(labels=rank_labels, values=Gyeonggi_list, name="Gyeonggi"),
              1, 2)
fig.add_trace(go.Pie(labels=rank_labels, values=Gyeongsang_list, name="Gyeongsang"),
              1, 3)


# Use `hole` to create a donut-like pie chart
fig.update_traces(hole=.4, hoverinfo="label+percent+name")

fig.update_layout(
    title_text="고객수 TOP 3 지역별 고객등급 분포",
    # Add annotations in the center of the donut pies.
    annotations=[dict(text='서울특별시', x=0.11, y=0.5, font_size=20, showarrow=False),
                 dict(text='경기도', x=0.5, y=0.5, font_size=20, showarrow=False),
                 dict(text='경상남도', x=0.88, y=0.5, font_size=20, showarrow=False)])
fig.show()

"""성별별 투자 성향

01: 안정형 / 02: 안정추구형 / 03: 위험중립형 
04: 적극투자형 / 05: 공격투자형 09: 전문투자자형 / 00:정보제공미동의 
_: 해당 사항 없음
"""

cus_yz_men = cus_yz[cus_yz['성별']==1]
cus_yz_women = cus_yz[cus_yz['성별']==2]

inv_type_men = cus_yz_men['고객투자성향'].value_counts()
inv_type_women = cus_yz_women['고객투자성향'].value_counts()

type_indices = ['01', '02', '03', '04', '05', '09', '00' '-']

men_list = []
women_list = []

for i in type_indices:
  try:
    men_list.append(inv_type_men[i])
  except KeyError:
    men_list.append(0)

for i in type_indices:
  try:
    women_list.append(inv_type_women[i])
  except KeyError:
    women_list.append(0)

type_labels = ["안정형", "안정추구형", "위험중립형", "적극투자형", "공격투자형", "전문투자형", "정보제공미동의", "해당사항 없음" ]

# Create subplots: use 'domain' type for Pie subplot
fig = make_subplots(rows=1, cols=2, specs=[[{'type':'domain'}, {'type':'domain'}]])
fig.add_trace(go.Pie(labels=type_labels, values=men_list, name="Men"),
              1, 1)
fig.add_trace(go.Pie(labels=type_labels, values=women_list, name="Women"),
              1, 2)


# Use `hole` to create a donut-like pie chart
fig.update_traces(hole=.4, hoverinfo="label+percent+name")

fig.update_layout(
    title_text="성별별 투자 성향",
    # Add annotations in the center of the donut pies.
    annotations=[dict(text='남성 투자자', x=0.19, y=0.5, font_size=20, showarrow=False),
                 dict(text='여성 투자자', x=0.81, y=0.5, font_size=20, showarrow=False)])
fig.show()

"""성별별 등급"""









"""stacked bar chart"""

forstacked = []
for i in type_indices[0:6]:
  try:
    forstacked.append(inv_type_men[i])
  except KeyError:
    forstacked.append(0)

  try:
    forstacked.append(inv_type_women[i])
  except KeyError:
    forstacked.append(0)

data = [["안정형", "안정형" , "안정추구형", "안정추구형", "위험중립형", "위험중립형", "적극투자형","적극투자형",  "공격투자형", "공격투자형", "전문투자형", "전문투자형"],
        ['남', '여', '남', '여', '남', '여', '남', '여', '남', '여', '남', '여'],
        forstacked]

rows = zip(data[0], data[1], data[2])

headers = ['Investment Type', 'Sex', 'Count']

df = pd.DataFrame(list(rows), columns=headers)

df

#matplotlib version

#pivot_df = df.pivot(index='Type', columns='Sex', values='Value')
#pivot_df = pivot_df[['남', '여']].copy()
#pivot_df

#import matplotlib.pyplot as plt
#%matplotlib inline

#pivot_df.plot.bar(stacked=True,legend='reverse', figsize=(10,7))

fig = px.bar(df, x="Investment Type", y="Count", color="Sex", title="YZ세대 투자유형별 성비")
fig.update_traces(texttemplate='%{y:.3s}', textposition='outside')

fig.show()

"""세대 / 월별 해외주식 매입 변화"""

from datetime import datetime, timedelta

foreign = trd_oss
foreign['주문날짜'] = pd.to_datetime(foreign['주문날짜'], format = '%Y%m%d')
foreign

act_tmp = act.iloc[:,0:2]
cus_tmp = cus.iloc[:,0:3]
persondata = pd.merge(act_tmp, cus_tmp, on = '고객번호', how='right')
persondata

foreigndata = pd.merge(persondata, foreign, on = '계좌번호', how='right') 
foreigndata['세대'] = ['Y' if foreigndata['연령대'][i] in [25, 30, 35] else ('Z' if foreigndata['연령대'][i] in [0, 20] else 'X') for i in range(len(foreigndata)) ]
foreign_yz = foreigndata[foreigndata['세대'].isin(['Y','Z'])]
foreign_yz

foreign_y = foreign_yz[foreign_yz['세대'].isin(['Y'])]
foreign_z = foreign_yz[foreign_yz['세대'].isin(['Z'])]

"""매수 데이터"""

buy_foreign_y = foreign_y[foreign_y['매매구분코드'] == 2]
buy_foreign_z = foreign_z[foreign_z['매매구분코드'] == 2]

buy_grouped_y = buy_foreign_y[['주문날짜', '체결수량']].groupby('주문날짜')
buy_grouped_z = buy_foreign_z[['주문날짜', '체결수량']].groupby('주문날짜')

buy_summed_y = buy_grouped_y.sum()
buy_summed_z = buy_grouped_z.sum()

buy_summed_y.reset_index(inplace=True)
buy_summed_z.reset_index(inplace=True)

"""매도 데이터"""

sell_foreign_y = foreign_y[foreign_y['매매구분코드'] == 1]
sell_foreign_z = foreign_z[foreign_z['매매구분코드'] == 1]

sell_grouped_y = sell_foreign_y[['주문날짜', '체결수량']].groupby('주문날짜')
sell_grouped_z = sell_foreign_z[['주문날짜', '체결수량']].groupby('주문날짜')

sell_summed_y = sell_grouped_y.sum()
sell_summed_z = sell_grouped_z.sum()

sell_summed_y.reset_index(inplace=True)
sell_summed_z.reset_index(inplace=True)

"""세대별 해외주식 매수 트렌드"""

layout = go.Layout(title = '세대별 해외주식 매수 트렌드')
fig = go.Figure(data = [
                        go.Scatter(x = buy_summed_y['주문날짜'], y = buy_summed_y['체결수량'], line_shape = 'linear', name = 'Y'),
                        go.Scatter(x = buy_summed_z['주문날짜'], y = buy_summed_z['체결수량'], line_shape = 'linear', name = 'Z')
], layout = layout)
fig.update_xaxes(linecolor = 'rgb(0, 0, 0)')
fig.update_layout(title = {'y': 0.87, 'x': 0.5, 'xanchor': 'center', 'yanchor': 'top'})
fig.update_layout(plot_bgcolor = 'rgb(255, 255, 255)')

"""세대별 해외주식 매도 트렌드"""

layout = go.Layout(title = '세대별 해외주식 매도 트렌드')
fig = go.Figure(data = [
                        go.Scatter(x = sell_summed_y['주문날짜'], y = sell_summed_y['체결수량'], line_shape = 'linear', name = 'Y'),
                        go.Scatter(x = sell_summed_z['주문날짜'], y = sell_summed_z['체결수량'], line_shape = 'linear', name = 'Z')
], layout = layout)
fig.update_xaxes(linecolor = 'rgb(0, 0, 0)')
fig.update_layout(title = {'y': 0.87, 'x': 0.5, 'xanchor': 'center', 'yanchor': 'top'})
fig.update_layout(plot_bgcolor = 'rgb(255, 255, 255)')

